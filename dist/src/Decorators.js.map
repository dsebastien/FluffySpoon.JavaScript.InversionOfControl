{"version":3,"file":"Decorators.js","sourceRoot":"","sources":["../../src/Decorators.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAE1B,yCAAsG;AAEtG,SAAgB,yBAAyB,CAAC,MAAM;IAC5C,OAAO,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;AAC5D,CAAC;AAFD,8DAEC;AAED,SAAgB,qBAAqB,CAAC,WAAgB;IAClD,IAAM,SAAS,GAAG,4BAAgB,CAAC,WAAW,CAAC,CAAC;IAEhD,IAAI,IAAI,GAAG,yBAAyB,CAAC,WAAW,CAAC,CAAC;IAElD,0BAAc,CAAC,WAAW,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;IAC/C,0BAAc,CAAC,WAAW,EAAE,eAAe,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAEtE,IAAI,2BAA2B,GAAG,iDAAqC,CAAC,WAAW,CAAC,CAAC;IAErF,IAAI,eAAe,GAAG,2BAA2B,CAAC,mBAAmB,EAAE,CAAC;IACxE,KAAyB,UAAe,EAAf,mCAAe,EAAf,6BAAe,EAAf,IAAe,EAAE;QAAtC,IAAI,aAAa,wBAAA;QACjB,IAAG,CAAC,IAAI,CAAC,aAAa,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,qEAAqE,GAAG,aAAa,GAAG,YAAY,GAAG,SAAS,GAAG,yBAAyB,GAAG,SAAS,GAAG,0CAA0C,CAAC,CAAC;QAE3N,2BAA2B,CAAC,sBAAsB,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;KAC1F;AACL,CAAC;AAjBD,sDAiBC;AAED,SAAgB,UAAU,CAAyC,WAAc;IAC7E,qBAAqB,CAAC,WAAW,CAAC,CAAC;IACnC,OAAO,WAAW,CAAC;AACvB,CAAC;AAHD,gCAGC;AAED,SAAgB,MAAM,CAAC,MAAW,EAAE,YAAoB,EAAE,cAAsB;IAC5E,IAAI,2BAA2B,GAAG,iDAAqC,CAAC,MAAM,CAAC,CAAC;IAChF,2BAA2B,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;AACvE,CAAC;AAHD,wBAGC","sourcesContent":["import \"reflect-metadata\";\r\n\r\nimport { defineMetadata, getOrCreateArgumentsMetadataForTarget, extractClassName } from \"./Utilities\";\r\n\r\nexport function getParameterTypesMetadata(target) {\r\n    return Reflect.getMetadata(\"design:paramtypes\", target);\r\n}\r\n\r\nexport function addInjectableMetadata(constructor: any) {\r\n    const className = extractClassName(constructor);\r\n\r\n    let type = getParameterTypesMetadata(constructor);\r\n\r\n    defineMetadata(constructor, 'name', className);\r\n    defineMetadata(constructor, 'argumentCount', !type ? 0 : type.length);\r\n\r\n    let argumentInjectionDictionary = getOrCreateArgumentsMetadataForTarget(constructor);\r\n\r\n    let argumentIndexes = argumentInjectionDictionary.getParameterIndexes();\r\n    for(var argumentIndex of argumentIndexes) {\r\n        if(!type[argumentIndex])\r\n            throw new Error('Could not extract type information for constructor parameter index ' + argumentIndex + ' of class ' + className + '. Make sure that class ' + className + ' is defined below the class it is using.');\r\n\r\n        argumentInjectionDictionary.updateParameterAtIndex(argumentIndex, type[argumentIndex]);\r\n    }\r\n}\r\n\r\nexport function Injectable<T extends { new(...args: any[]): any }>(constructor: T) {\r\n    addInjectableMetadata(constructor);\r\n    return constructor;\r\n}\r\n\r\nexport function Inject(target: any, _propertyKey: string, parameterIndex: number) {\r\n    let argumentInjectionDictionary = getOrCreateArgumentsMetadataForTarget(target);\r\n    argumentInjectionDictionary.updateParameterAtIndex(parameterIndex);\r\n}"]}