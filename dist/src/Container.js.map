{"version":3,"file":"Container.js","sourceRoot":"","sources":["../../src/Container.ts"],"names":[],"mappings":"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","sourcesContent":["import \"reflect-metadata\";\r\n\r\nimport { Constructor } from \"./Types\";\r\nimport { PendingResolveJob } from './PendingResolveJob';\r\nimport { getMetadata, extractClassName } from \"./Utilities\";\r\nimport { ArgumentInjectionDictionary } from \"./ArgumentInjectionDictionary\";\r\n\r\nexport class Container {\r\n    private readonly _typeMappings: Array<{\r\n        requestingType: Constructor<any>,\r\n        useType: Constructor<any>\r\n    }>;\r\n\r\n    constructor() {\r\n        this._typeMappings = [];\r\n    }\r\n\r\n    whenRequestingType<T>(requestingType: Constructor<T>) {\r\n        return {\r\n            useType: (useType: Constructor<T>) => this._typeMappings.push({\r\n                requestingType,\r\n                useType\r\n            })\r\n        };\r\n    }\r\n\r\n    resolve<T>(typeToResolve: Constructor<T>): T {\r\n        const resolveJobs = new Array<PendingResolveJob>();\r\n        resolveJobs.push(new PendingResolveJob(typeToResolve, null, null));\r\n\r\n        while(resolveJobs.length > 0) {\r\n            let job = resolveJobs[resolveJobs.length - 1];\r\n\r\n            try {\r\n                const parentJob = job.parent;\r\n\r\n                let constructor = job.constructor;\r\n                const className = extractClassName(constructor);\r\n\r\n                for(let mapping of this._typeMappings) {\r\n                    if(mapping.requestingType !== constructor)\r\n                        continue;\r\n\r\n                    constructor = mapping.useType;\r\n                    break;\r\n                }\r\n\r\n                if(constructor === String || constructor === Number)\r\n                    throw new Error('Simple types (in this case ' + className + ') can\\'t be injected.');\r\n\r\n                const argumentInjectionInstanceDictionary = job.argumentInjectionDictionary;\r\n                const parentArgumentInjectionInstanceDictionary = parentJob && parentJob.argumentInjectionDictionary;\r\n\r\n                if(argumentInjectionInstanceDictionary.getParameterIndexes().length === job.argumentCount) {\r\n                    const instance = new (constructor as any)(...argumentInjectionInstanceDictionary.toParameterArray());\r\n                    if(parentJob === null)\r\n                        return instance;\r\n\r\n                    parentArgumentInjectionInstanceDictionary.updateParameterAtIndex(job.argumentIndex, instance);\r\n\r\n                    resolveJobs.splice(resolveJobs.length - 1, 1);\r\n\r\n                    continue;\r\n                }\r\n                \r\n                const argumentInjectionTypeDictionary = getMetadata<ArgumentInjectionDictionary>(constructor, 'arguments');\r\n                const argumentCount = getMetadata<number>(constructor, 'argumentCount');\r\n\r\n                if(!argumentInjectionTypeDictionary)\r\n                    throw new Error('The class ' + className + ' must be decorated with the @Injectable decorator for it to be resolved.');\r\n\r\n                job.argumentCount = argumentCount;\r\n\r\n                if(argumentInjectionTypeDictionary.getParameterIndexes().length !== argumentCount)\r\n                    throw new Error('All arguments in the class ' + className + ' must have the @Inject decorator set for it to be resolved.');\r\n                \r\n                const argumentIndexes = argumentInjectionTypeDictionary.getParameterIndexes();\r\n                if(argumentCount > 0) {\r\n                    for(let argumentIndex of argumentIndexes) {\r\n                        const argumentType = argumentInjectionTypeDictionary.getParameter(argumentIndex);\r\n                        resolveJobs.push(new PendingResolveJob(argumentType, job, argumentIndex));\r\n                    }\r\n                } else {\r\n                    const instance = new (constructor as any)();\r\n                    if(parentJob === null)\r\n                        return instance;\r\n\r\n                    parentArgumentInjectionInstanceDictionary.updateParameterAtIndex(job.argumentIndex, instance);\r\n\r\n                    resolveJobs.splice(resolveJobs.length - 1, 1);\r\n\r\n                    continue;\r\n                }\r\n            } catch(ex) {\r\n                let path = extractClassName(job.constructor);\r\n                let pathCount = 1;\r\n\r\n                let jobIteration: PendingResolveJob;\r\n\r\n                jobIteration = job;\r\n                while(true) {\r\n                    jobIteration = jobIteration.parent;\r\n                    if(!jobIteration)\r\n                        break;\r\n                    \r\n                    pathCount++;\r\n                }\r\n\r\n                let indentCount = pathCount - 1;\r\n\r\n                jobIteration = job;\r\n                while(true) {\r\n                    jobIteration = jobIteration.parent;\r\n                    if(!jobIteration)\r\n                        break;\r\n\r\n                    let indent = '';\r\n                    for(var i=0;i<indentCount;i++) {\r\n                        indent += '   ';\r\n                    }\r\n                    \r\n                    path = extractClassName(jobIteration.constructor) + '\\n' + indent + '-> ' + path;\r\n\r\n                    indentCount--;\r\n                }\r\n\r\n                console && console.error('An error occured while resolving:\\n-> ' + path + '\\n\\n', ex);\r\n\r\n                throw ex;\r\n            }\r\n        }\r\n\r\n        throw new Error('Could not find a type to use for ' + extractClassName(typeToResolve) + '.');\r\n    }\r\n}"]}