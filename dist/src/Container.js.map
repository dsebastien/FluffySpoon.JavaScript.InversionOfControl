{"version":3,"file":"Container.js","sourceRoot":"","sources":["../../src/Container.ts"],"names":[],"mappings":"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","sourcesContent":["import \"reflect-metadata\";\r\n\r\nimport { Constructor } from \"./Types\";\r\nimport { PendingResolveJob } from './PendingResolveJob';\r\nimport { getMetadata, extractClassName } from \"./Utilities\";\r\nimport { ArgumentInjectionDictionary } from \"./ArgumentInjectionDictionary\";\r\n\r\ntype TypeMapping = {\r\n    requestingType: Constructor<any>,\r\n    lifetime: 'singleton' | 'per-request',\r\n    useType?: Constructor<any>,\r\n    useFactory?: () => any\r\n};\r\n\r\nexport class Container {\r\n    private readonly _typeMappings: Array<TypeMapping>;\r\n    private readonly _singletonCache: Array<{\r\n        type: Constructor,\r\n        instance: any\r\n    }>;\r\n\r\n    constructor() {\r\n        this._typeMappings = [];\r\n        this._singletonCache = [];\r\n    }\r\n\r\n    whenRequestingType<T>(requestingType: Constructor<T>) {\r\n        const typeMapping: TypeMapping = this.createNewTypeMapping(requestingType);\r\n\r\n        for(let existingTypeMapping of [...this._typeMappings]) {\r\n            if(existingTypeMapping.requestingType === requestingType)\r\n                this._typeMappings.splice(this._typeMappings.indexOf(existingTypeMapping), 1);\r\n        }\r\n\r\n        for(let existingSingletonCacheEntry of [...this._singletonCache]) {\r\n            if(existingSingletonCacheEntry.type === requestingType)\r\n                this._singletonCache.splice(this._singletonCache.indexOf(existingSingletonCacheEntry), 1);\r\n        }\r\n\r\n        this._typeMappings.push(typeMapping);\r\n\r\n        const use = (mappingCallback: (mapping: TypeMapping) => void) => {\r\n            mappingCallback(typeMapping);\r\n\r\n            return {\r\n                asSingleInstance: () => {\r\n                    this._singletonCache.push({\r\n                        instance: null,\r\n                        type: requestingType\r\n                    });\r\n                    typeMapping.lifetime = 'singleton';\r\n                },\r\n                asInstancePerRequest: () => typeMapping.lifetime = 'per-request'\r\n            }\r\n        };\r\n\r\n        return {\r\n            useType: (t: Constructor<T>) => use(m => m.useType = t),\r\n            useRequestedType: () => use(m => m.useType = requestingType),\r\n            useFactory: (f: () => T) => use(m => m.useFactory = f)\r\n        };\r\n    }\r\n\r\n    private createNewTypeMapping(requestingType: Constructor): TypeMapping {\r\n        return {\r\n            requestingType,\r\n            lifetime: 'per-request'\r\n        };\r\n    }\r\n\r\n    private findTypeMappingForConstructor(constructor: Constructor): TypeMapping {\r\n        for(let mapping of this._typeMappings) {\r\n            if(mapping.requestingType !== constructor)\r\n                continue;\r\n\r\n            return mapping;\r\n        }\r\n\r\n        const mapping = this.createNewTypeMapping(constructor);\r\n        return mapping;\r\n    }\r\n\r\n    resolve<T>(typeToResolve: Constructor<T>): T {\r\n        const resolveJobs = new Array<PendingResolveJob>();\r\n        resolveJobs.push(new PendingResolveJob(typeToResolve, null, null));\r\n\r\n        while(resolveJobs.length > 0) {\r\n            let job = resolveJobs[resolveJobs.length - 1];\r\n\r\n            try {\r\n                const mapping = this.findTypeMappingForConstructor(job.constructor);\r\n\r\n                let constructor = mapping.useType || mapping.requestingType;\r\n                const className = extractClassName(constructor);\r\n\r\n                if(constructor === String || constructor === Number || constructor === Boolean)\r\n                    throw new Error('Simple types (in this case ' + className + ') can\\'t be injected.');\r\n\r\n                const argumentInjectionInstanceDictionary = job.argumentInjectionDictionary;\r\n                if(argumentInjectionInstanceDictionary.getParameterIndexes().length === job.argumentCount) {\r\n                    const instance = this.createInstance(job, mapping, resolveJobs);\r\n                    if(instance)\r\n                        return instance;\r\n\r\n                    continue;\r\n                }\r\n                \r\n                const argumentInjectionTypeDictionary = getMetadata<ArgumentInjectionDictionary>(constructor, 'arguments');\r\n                const argumentCount = getMetadata<number>(constructor, 'argumentCount');\r\n\r\n                if(!argumentInjectionTypeDictionary)\r\n                    throw new Error('The class ' + className + ' must be decorated with the @Injectable decorator for it to be resolved.');\r\n\r\n                job.argumentCount = argumentCount;\r\n\r\n                if(argumentInjectionTypeDictionary.getParameterIndexes().length !== argumentCount)\r\n                    throw new Error('All arguments in the class ' + className + ' must have the @Inject decorator set for it to be resolved.');\r\n                \r\n                const argumentIndexes = argumentInjectionTypeDictionary.getParameterIndexes();\r\n                if(argumentCount > 0) {\r\n                    for(let argumentIndex of argumentIndexes) {\r\n                        const argumentType = argumentInjectionTypeDictionary.getParameter(argumentIndex);\r\n                        resolveJobs.push(new PendingResolveJob(argumentType, job, argumentIndex));\r\n                    }\r\n                } else {\r\n                    const instance = this.createInstance(job, mapping, resolveJobs);\r\n                    if(instance)\r\n                        return instance;\r\n                }\r\n            } catch(ex) {\r\n                if(!(ex instanceof Error))\r\n                    ex = new Error(ex);\r\n\r\n                let path = extractClassName(job.constructor);\r\n                let pathCount = 1;\r\n\r\n                let jobIteration: PendingResolveJob;\r\n\r\n                jobIteration = job;\r\n                while(true) {\r\n                    jobIteration = jobIteration.parent;\r\n                    if(!jobIteration)\r\n                        break;\r\n                    \r\n                    pathCount++;\r\n                }\r\n\r\n                let indentCount = pathCount - 1;\r\n\r\n                jobIteration = job;\r\n                while(true) {\r\n                    jobIteration = jobIteration.parent;\r\n                    if(!jobIteration)\r\n                        break;\r\n\r\n                    let indent = '';\r\n                    for(var i=0;i<indentCount;i++) {\r\n                        indent += '   ';\r\n                    }\r\n                    \r\n                    path = extractClassName(jobIteration.constructor) + '\\n' + indent + '-> ' + path;\r\n\r\n                    indentCount--;\r\n                }\r\n\r\n                throw new Error('An error occured while resolving:\\n-> ' + path + '\\n\\n' + ex + '\\n' + ex.stacktrace);\r\n            }\r\n        }\r\n\r\n        throw new Error('Could not find a type to use for ' + extractClassName(typeToResolve) + '.');\r\n    }\r\n\r\n    private getSingletonCacheEntry(type: Constructor) {\r\n        for(let singletonInstance of this._singletonCache) {\r\n            if(singletonInstance.type === type)\r\n                return singletonInstance;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private createInstance(job: PendingResolveJob, mapping: TypeMapping, resolveJobs: PendingResolveJob[]): any {\r\n        const parentJob = job.parent;\r\n        const parentArgumentInjectionInstanceDictionary = parentJob && parentJob.argumentInjectionDictionary;\r\n        \r\n        const instanceFactory = () => {\r\n            if(mapping.useFactory)\r\n                return mapping.useFactory();\r\n\r\n            return new (mapping.useType || (mapping.requestingType as any))(\r\n                ...job.argumentInjectionDictionary.toParameterArray());\r\n        };\r\n\r\n        let instance: any;\r\n        const singletonCacheEntry = this.getSingletonCacheEntry(mapping.requestingType);\r\n\r\n        if(singletonCacheEntry) {\r\n            instance = singletonCacheEntry.instance || (singletonCacheEntry.instance = instanceFactory());\r\n        } else {\r\n            instance = instanceFactory();\r\n        }\r\n\r\n        if(parentJob === null)\r\n            return instance;\r\n\r\n        parentArgumentInjectionInstanceDictionary.updateParameterAtIndex(job.argumentIndex, instance);\r\n\r\n        resolveJobs.splice(resolveJobs.length - 1, 1);\r\n\r\n        return null;\r\n    }\r\n}"]}