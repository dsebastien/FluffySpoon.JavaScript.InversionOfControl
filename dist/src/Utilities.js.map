{"version":3,"file":"Utilities.js","sourceRoot":"","sources":["../../src/Utilities.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAE1B,6EAA4E;AAE5E,SAAgB,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK;IAC7C,OAAO,CAAC,cAAc,CAAC,wBAAwB,GAAG,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;AAC1E,CAAC;AAFD,wCAEC;AAED,SAAgB,WAAW,CAAI,MAAM,EAAE,GAAG;IACtC,OAAO,OAAO,CAAC,WAAW,CAAC,wBAAwB,GAAG,GAAG,EAAE,MAAM,CAAM,CAAC;AAC5E,CAAC;AAFD,kCAEC;AAED,SAAgB,qCAAqC,CAAC,MAAW;IAC7D,IAAI,2BAA2B,GAAG,WAAW,CAA8B,MAAM,EAAE,WAAW,CAAC,CAAC;IAChG,IAAI,CAAC,2BAA2B,EAAE;QAC9B,2BAA2B,GAAG,IAAI,yDAA2B,EAAE,CAAC;QAChE,cAAc,CAAC,MAAM,EAAE,WAAW,EAAE,2BAA2B,CAAC,CAAC;KACpE;IACD,OAAO,2BAA2B,CAAC;AACvC,CAAC;AAPD,sFAOC","sourcesContent":["import \"reflect-metadata\";\r\n\r\nimport { ArgumentInjectionDictionary } from \"./ArgumentInjectionDictionary\";\r\n\r\nexport function defineMetadata(target, key, value) {\r\n    Reflect.defineMetadata('@fluffy-spoon/inverse/' + key, value, target);\r\n}\r\n\r\nexport function getMetadata<T>(target, key) {\r\n    return Reflect.getMetadata('@fluffy-spoon/inverse/' + key, target) as T;\r\n}\r\n\r\nexport function getOrCreateArgumentsMetadataForTarget(target: any) {\r\n    let argumentInjectionDictionary = getMetadata<ArgumentInjectionDictionary>(target, 'arguments');\r\n    if (!argumentInjectionDictionary) {\r\n        argumentInjectionDictionary = new ArgumentInjectionDictionary();\r\n        defineMetadata(target, 'arguments', argumentInjectionDictionary);\r\n    }\r\n    return argumentInjectionDictionary;\r\n}"]}