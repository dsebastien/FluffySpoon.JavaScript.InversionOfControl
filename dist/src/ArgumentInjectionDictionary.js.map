{"version":3,"file":"ArgumentInjectionDictionary.js","sourceRoot":"","sources":["../../src/ArgumentInjectionDictionary.ts"],"names":[],"mappings":";;AAAA,yCAA+C;AAE/C;IAII,qCAAoB,OAAY;QAAZ,YAAO,GAAP,OAAO,CAAK;QAC5B,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,CAAC;IAED,yDAAmB,GAAnB;QACI,OAAW,IAAI,CAAC,QAAQ,SAAE;IAC9B,CAAC;IAED,kDAAY,GAAZ,UAAa,KAAa;QACtB,IAAG,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,KAAK,GAAG,qCAAqC,GAAG,4BAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC;QAErI,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC9C,CAAC;IAED,sDAAgB,GAAhB;QACI,IAAM,UAAU,GAAG,IAAI,KAAK,EAAO,CAAC;QACpC,KAAiB,UAAa,EAAb,KAAA,IAAI,CAAC,QAAQ,EAAb,cAAa,EAAb,IAAa,EAAE;YAA5B,IAAI,KAAK,SAAA;YACT,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;SAC7C;QAED,OAAO,UAAU,CAAC;IACtB,CAAC;IAED,4DAAsB,GAAtB,UAAuB,KAAa,EAAE,KAAW;QAC7C,IAAG,KAAK,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YAC3C,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,GAAG,KAAK,IAAI,IAAI,CAAC;QAEvD,IAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IACL,kCAAC;AAAD,CAAC,AApCD,IAoCC;AApCY,kEAA2B","sourcesContent":["import { extractClassName } from \"./Utilities\";\r\n\r\nexport class ArgumentInjectionDictionary {\r\n    private readonly _dictionary;\r\n    private readonly _indexes: number[];\r\n\r\n    constructor(private _target: any) {\r\n        this._dictionary = {};\r\n        this._indexes = [];\r\n    }\r\n\r\n    getParameterIndexes() {\r\n        return [...this._indexes];\r\n    }\r\n\r\n    getParameter(index: number) {\r\n        if(!this._dictionary[index.toString()])\r\n            throw new Error('No parameter at index ' + index + ' was found on constructor of class ' + extractClassName(this._target) + '.');\r\n\r\n        return this._dictionary[index.toString()];\r\n    }\r\n\r\n    toParameterArray() {\r\n        const parameters = new Array<any>();\r\n        for(let index of this._indexes) {\r\n            parameters.push(this.getParameter(index));\r\n        }\r\n\r\n        return parameters;\r\n    }\r\n\r\n    updateParameterAtIndex(index: number, value?: any) {\r\n        if(value || !this._dictionary[index.toString()])\r\n            this._dictionary[index.toString()] = value || null;\r\n        \r\n        if(this._indexes.indexOf(index) === -1)\r\n            this._indexes.push(index);\r\n    }\r\n}"]}